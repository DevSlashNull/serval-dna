#!/bin/bash
#
# Build configuration utility for Serval DNA on Apple iOS.
#
# Copyright 2016 Flinders University
#
# This script runs Serval DNA's main 'configure' script several times, once for
# each different target iOS architecture, and saves the Makefile generated by
# each run.  It then creates a Makefile that: (a) invokes each of the saved
# Makefiles in turn, then (b) combines all the built libraries into a single
# library that can be imported into an Xcode project.
#
# This allows the iOS development cycle to be similar to that for architectures
# such as Linux or Apple OS-X:
#  (1) a single 'configure' step adapts the Makefile(s) to the specific needs of
#      the target architecture(s), then
#  (2) the edit-make-test cycle can be repeated as often as desired:
#      (a) edit; make changes to source file(s)
#      (b) make: compile the changed source files into executable form using the
#          dependency rules in the Makefile(s) to avoid unnecessary
#          re-compilation
#      (c) test: run the built executable
#
# For iOS development, step (b) must be followed by an Xcode project re-build,
# to embed the newly-compiled Serval DNA library into the app under development.

usage() {
   echo "Usage: ${0##*/} [--skip-configure]"
}

ARCHITECTURES=(armv7 arm64 i386 x86_64)

# Exit on error
set -e

usage_error() {
   echo "${0##*/}: $*" >&2
   usage >&2
   exit 1
}

fatal() {
   echo "${0##*/}: $1" >&2
   shift
   while [ $# -ne 0 ]; do
      echo "$1" >&2
      shift
   done
   exit 1
}

# Parse command-line options.

opt_do_configure=true
while [ $# -ne 0 ]; do
   opt="$1"
   shift
   case "$opt" in
   -h | --help)
      usage
      exit 0
      ;;
   --skip-configure)
      opt_do_configure=false
      ;;
   -*)
      usage_error "Unknown option: $opt"
      ;;
   *)
      usage_error "Spurious argument: $opt"
      ;;
   esac
done

# Discover the versions of the iPhone OS and iPhone Simulator APIs available in Xcode.

if ! XCODE_VERSIONS="$(xcodebuild -version -sdk)"; then
   fatal "cannot determine the available Xcode versions"
fi
IPHONE_OS_DETAILS="$(grep '^iPhoneOS[0-9.]*\.sdk' <<<"$XCODE_VERSIONS")"
IPHONE_SIMULATOR_DETAILS="$(grep '^iPhoneSimulator[0-9.]*\.sdk' <<<"$XCODE_VERSIONS")"

if [ -z "$IPHONE_OS_DETAILS" ]; then
   fatal "cannot detect the iPhoneOS SDK version"
fi
if [ -z "$IPHONE_SIMULATOR_DETAILS" ]; then
   fatal "cannot detect the iPhoneSimulator SDK version"
fi
if [ $(wc -l <<<"$IPHONE_OS_DETAILS") -ne 1 ]; then
   fatal "more than one iPhoneOS SDK version"
fi
if [ $(wc -l <<<"$IPHONE_SIMULATOR_DETAILS") -ne 1 ]; then
   fatal "more than one iPhoneSimulator SDK version"
fi

echo "Using $IPHONE_OS_DETAILS"
echo "Using $IPHONE_SIMULATOR_DETAILS"

IPHONE_OS_SDK="${IPHONE_OS_DETAILS%%.sdk*}.sdk"
IPHONE_SIMULATOR_SDK="${IPHONE_SIMULATOR_DETAILS%%.sdk*}.sdk"

IPHONE_OS_SDK_VERSION="${IPHONE_OS_SDK#iPhoneOS}"
IPHONE_OS_SDK_VERSION="${IPHONE_OS_SDK_VERSION%.sdk}"

IPHONE_SIMULATOR_SDK_VERSION="${IPHONE_SIMULATOR_SDK#iPhoneSimulator}"
IPHONE_SIMULATOR_SDK_VERSION="${IPHONE_SIMULATOR_SDK_VERSION%.sdk}"

# Discover the current Xcode active developer directory, which is where the SDK
# files are located.

if ! DEVELOPER_DIR="$(xcode-select --print-path)"; then
   fatal "cannot determine the Xcode active developer directory"
fi
if [ ! -d "$DEVELOPER_DIR" ]; then
   fatal "non-existent Xcode active developer directory: $DEVELOPER_DIR"
fi

# Work out the path of the directory containing this script relative to the
# current working directory (SCRIPT_DIR), the path of the Serval DNA repository
# root directory relative to the current working directory (SERVAL_DNA_DIR), and
# the path of these two directories relative to each other.

case "$0" in
./?*/*) SCRIPT_DIR="${0%/*}"; SERVAL_DNA_DIR=".";;
*/?*/*) SCRIPT_DIR="${0%/*}"; SERVAL_DNA_DIR="${0%/?*/*}";;
./*)    SCRIPT_DIR=".";       SERVAL_DNA_DIR="..";;
*/*)    SCRIPT_DIR="${0%/*}"; SERVAL_DNA_DIR=".";;
*)      SCRIPT_DIR=".";       SERVAL_DNA_DIR="..";;
esac
SCRIPT_DIR_RELATIVE_SERVAL_DNA_DIR="$(cd "$SCRIPT_DIR" >/dev/null && echo "${PWD##*/}")"
SERVAL_DNA_DIR_RELATIVE_SCRIPT_DIR=".."

# Check that the Serval DNA 'configure' script exists and is executable.

SERVAL_DNA_CONFIGURE="$SERVAL_DNA_DIR/configure"
if [ ! -e "$SERVAL_DNA_CONFIGURE" ]; then
   fatal "missing script: $SERVAL_DNA_CONFIGURE" \
         "Run 'autoreconf -f -i -I m4' then run this script again."
fi
if [ ! -x "$SERVAL_DNA_CONFIGURE" ]; then
   fatal "script is not executable: $SERVAL_DNA_CONFIGURE"
fi
case "$("$SERVAL_DNA_CONFIGURE" --version)" in
servald\ configure\ *) ;;
*) fatal "script does not come from configure.ac: $SERVAL_DNA_CONFIGURE"
esac

# Path of the directory under which the files this script creates will be placed
# relative to the directory containing this script.

BUILD_DIR="build"
SERVAL_DNA_DIR_RELATIVE_TO_BUILD_DIR=".."

# Run the Serval DNA configure script once for each architecture, and save the
# files produced by each run.

LOG_DISPLAY_LINE_COUNT=10

check_shell_expansion() {
   local varname="$1"
   eval set -- ${!varname}
   if [ $# -ne 1 -o "$1" != "${!varname}" ]; then
      fatal "shell variable $varname contains spaces or shell metacharacters: $*"
   fi
}

exec 5>&1
run() {
   echo + "$@" >&5
   "$@"
}

if $opt_do_configure; then
   for ARCH in "${ARCHITECTURES[@]}"; do
      ARCH_DIR="$SCRIPT_DIR/$BUILD_DIR/$ARCH"
      ARCH_DIR="${ARCH_DIR#./}"
      PREFIX="/tmp/serval-dna"
      case "$ARCH" in
      i386)
         PLATFORM="iPhoneSimulator"
         HOST="--host=i386-apple-darwin"
         SDK="$IPHONE_SIMULATOR_SDK"
         SDK_VERSION="$IPHONE_SIMULATOR_SDK_VERSION"
         ;;
      x86_64)
         PLATFORM="iPhoneSimulator"
         SDK="$IPHONE_SIMULATOR_SDK"
         SDK_VERSION="$IPHONE_SIMULATOR_SDK_VERSION"
         ;;
      *)
         PLATFORM="iPhoneOS"
         HOST="--host=arm-apple-darwin"
         SDK="$IPHONE_OS_SDK"
         SDK_VERSION="$IPHONE_OS_SDK_VERSION"
         PREFIX="/Library/Serval"
         ;;
      esac

      SDKROOT="${DEVELOPER_DIR}/Platforms/${PLATFORM}.platform/Developer/SDKs/$SDK"
      check_shell_expansion SDKROOT

      echo "Configuring for ${PLATFORM} ${SDK_VERSION} ${ARCH}:"
      mkdir -p "$ARCH_DIR"

      # Note: the configure script created by autoconf places its output files in
      # the current working directory.
      run pushd "$ARCH_DIR" >/dev/null
      run rm -f Makefile
      run export CFLAGS="-arch ${ARCH} -pipe -no-cpp-precomp -isysroot $SDKROOT -I$SDKROOT/usr/include -miphoneos-version-min=${SDK_VERSION}"
      run export CC="clang"
      if ! run "../$SERVAL_DNA_DIR_RELATIVE_TO_BUILD_DIR/$SERVAL_DNA_DIR_RELATIVE_SCRIPT_DIR/configure" $HOST --prefix $PREFIX &>configure.out; then
         fatal "configure failed; see $ARCH_DIR/configure.out for full log" \
               "Last $LOG_DISPLAY_LINE_COUNT lines were:" \
               "" \
               "$(tail -n $LOG_DISPLAY_LINE_COUNT configure.out)"
      fi

      if [ ! -r Makefile ]; then
         fatal "configure for $ARCH did not produce Makefile"
      fi

      run popd >/dev/null
   done
fi

# Create a Serval DNA Makefile that simply invokes all the per-architecture iOS
# makefiles, then merges their built libraries into a single library.

TAB='	'
NL='
'
LIBRARY_NAME=libservald

foreach_arch() {
   for ARCH in "${ARCHITECTURES[@]}"; do
      ARCH_DIR="$SCRIPT_DIR_RELATIVE_SERVAL_DNA_DIR/$BUILD_DIR/$ARCH"
      eval "$@"
   done
}

echo "Creating $SERVAL_DNA_DIR/Makefile"
{
   echo "# Makefile for Serval DNA on Apple iOS"
   echo "# This file was auto-generated by the ./$SCRIPT_DIR_RELATIVE_SERVAL_DNA_DIR/${0##*/} script"
   echo "# $(date)"
   echo

   echo ".PHONY: all clean"

   echo -n ".PHONY:"
   foreach_arch echo -n '" make-$ARCH"'
   echo

   echo -n ".PHONY:"
   foreach_arch echo -n '" clean-$ARCH"'
   echo

   echo
   echo -n "all:"
   foreach_arch echo -n '" make-$ARCH"'
   echo " $LIBRARY_NAME.a"

   echo
   echo -n "clean:"
   foreach_arch echo -n '" clean-$ARCH"'
   echo
   echo "${TAB}rm -f $LIBRARY_NAME.a"
   foreach_arch echo \; echo '"clean-$ARCH:"' \; echo '"$TAB\$(MAKE) -C $ARCH_DIR SOURCE_PREFIX=../../../ clean"'

   echo
   echo -n "$LIBRARY_NAME.a:"
   foreach_arch echo -n '" \\$NL$TAB$TAB$ARCH_DIR/$LIBRARY_NAME.a"'
   echo
   echo -n "${TAB}lipo -create -output \$@"
   foreach_arch echo -n '" \\$NL$TAB$TAB$ARCH_DIR/$LIBRARY_NAME.a"'
   echo
   foreach_arch echo \; echo '"make-$ARCH:"' \; echo '"$TAB\$(MAKE) -C $ARCH_DIR SOURCE_PREFIX=../../../ $LIBRARY_NAME.a"'

}>"$SERVAL_DNA_DIR/Makefile"
